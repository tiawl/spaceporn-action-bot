name: 'Bot'
description: 'Fetch dependencies (zig modules, git submodules, git clone used in build.zig) & makes a pull request'
inputs:
  token:
    description: 'The github token'
    required: true
runs:
  using: "composite"
  steps:
    - uses: tiawl/spaceporn-dep-action-env@v1

    - name: Load environment
      shell: ${{ env.shell }}
      run: |
        yq '. | to_entries | map([.key, .value] | join ("=")) | .[]' "${GITHUB_ACTION_PATH}/env.yml" >> "${GITHUB_ENV}"

    - name: Close every bot PRs/issues
      shell: ${{ env.shell }}
      run: |
        declare -a pr_list=( $(gh pr list --author '@me' --state open --json "${{ env.gh_field }}" | jq ".[] | .${{ env.gh_field }}") )
        for pr_nr in ${pr_list[@]}
        do
          gh pr close "${pr_nr}" --comment "${{ env.gh_bot_close_comment }}" --delete-branch
        done
        declare -a issue_list=( $(gh issue list --author '@me' --state open --json "${{ env.gh_field }}" | jq ".[] | .${{ env.gh_field }}") )
        for issue_nr in ${issue_list[@]}
        do
          gh issue close "${issue_nr}" --comment "${{ env.gh_bot_close_comment }}"
        done
        if [[ "$(( "$(gh pr list --author '@me' --state open --json "${{ env.gh_field }}" | jq length)" +
                   "$(gh issue list --author '@me' --state open --json "${{ env.gh_field }}" | jq length)" ))" != '0' ]];
        then
          exit 1
        fi
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2.2.0
      with:
        version: ${{ env.zig_version }}

    - name: Install apt packages
      shell: ${{ env.shell }}
      run: |
        sudo apt-get install -y ${{ env.apt_packages }}

    - name: Install pip packages
      shell: ${{ env.shell }}
      run: |
        pip3 install ${{ env.pip_packages }}

    - name: Setup git user information
      shell: ${{ env.shell }}
      run: |
        git config user.name "${{ env.gh_bot_name }}"
        git config user.email "${{ env.gh_bot_email }}"
        git checkout -b "${{ env.bot_branch }}"

    - name: Pull submodules
      shell: ${{ env.shell }}
      run: |
        git submodule update --init --recursive

    - name: Fetch
      id: fetch
      shell: ${{ env.shell }}
      run: |
        zig build -Dfetch
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Create Issue
      if: ${{ failure() && steps.fetch.conclusion == 'failure' }}
      shell: ${{ env.shell }}
      run: |
        gh issue create --title "${{ env.gh_bot_issue_title }}" --body "${{ env.gh_bot_issue_body }}" --assignee "${GITHUB_REPOSITORY_OWNER}"
      env:
        GH_TOKEN: ${{ inputs.token }}

    - name: Diff
      if: ${{ steps.fetch.conclusion == 'success' }}
      id: diff
      shell: ${{ env.shell }}
      run: |
        printf 'len=%s\n' "$(git diff HEAD --name-only | wc -l)" >> "${GITHUB_OUTPUT}"

    - name: Update
      if: ${{ steps.fetch.conclusion == 'success' && steps.diff.outputs.len != '0' }}
      shell: ${{ env.shell }}
      run: |
        zig build -Dupdate

    - name: Create Pull Request
      if: ${{ steps.fetch.conclusion == 'success' && steps.diff.outputs.len != '0' }}
      shell: ${{ env.shell }}
      run: |
        git add -A
        git commit -m "Bot: ${{ env.gh_bot_pr_title }}"
        git push --force --set-upstream origin "${{ env.bot_branch }}"
        gh pr create --base "${{ env.default_branch }}" --fill --reviewer "${GITHUB_REPOSITORY_OWNER}"
      env:
        GH_TOKEN: ${{ inputs.token }}
