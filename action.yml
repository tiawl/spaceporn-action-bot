name: 'Bot'
description: 'Fetch dependencies (zig modules, git submodules, git clone used in build.zig) & makes a pull request'
inputs:
  repository:
    description: 'The repository name'
    required: true
  token:
    description: 'The github token'
    required: true
runs:
  using: "composite"
  steps:
    - uses: tiawl/spaceporn-action-env@v1.0.0
    - uses: tiawl/spaceporn-action-env@v1.0.0
      with:
        repository: "${{ github.repository }}"
        path: "${{ github.action_path }}"

    - uses: actions/checkout@v4
      with:
        repository: "${{ inputs.repository }}"

    - name: Close every bot PRs/issues
      env:
        OPTIONS: "--author '@me' --state open --json \"${{ env.gh_field }}\""
        COMMENT: "--comment '${{ env.gh_bot_close_comment }}'"
        GH_TOKEN: "${{ inputs.token }}"
        FILTER: ".[] | .${{ env.gh_field }}"
      shell: ${{ env.shell }}
      run: |
        declare -a pr_list=( $(gh pr list ${OPTIONS} | jq "${FILTER}") )
        for pr_nr in ${pr_list[@]}
        do
          gh pr close "${pr_nr}" ${COMMENT} --delete-branch
        done
        declare -a issue_list=( $(gh issue list ${OPTIONS} | jq "${FILTER}") )
        for issue_nr in ${issue_list[@]}
        do
          gh issue close "${issue_nr}" ${COMMENT}
        done
        if [[ "$(( "$(gh pr list ${OPTIONS} | jq length)" +
                   "$(gh issue list ${OPTIONS} | jq length)" ))" != '0' ]];
        then
          exit 1
        fi

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2.2.0
      with:
        version: ${{ env.zig_version }}

    - name: Install apt packages
      env:
        PACKAGES: "${{ env.apt_packages }}"
      shell: ${{ env.shell }}
      run: |
        sudo apt-get install -y ${PACKAGES}

    - name: Install pip packages
      env:
        PACKAGES: "${{ env.pip_packages }}"
      shell: ${{ env.shell }}
      run: |
        pip3 install ${PACKAGES}

    - name: Setup git user information
      env:
        BRANCH: "${{ env.bot_branch }}"
        EMAIL: "${{ env.gh_bot_email }}"
        NAME: "${{ env.gh_bot_name }}"
      shell: ${{ env.shell }}
      run: |
        git config user.name "${NAME}"
        git config user.email "${EMAIL}"
        git checkout -b "${BRANCH}"

    - name: Pull submodules
      shell: ${{ env.shell }}
      run: |
        git submodule update --init --recursive

    - name: Fetch
      id: fetch
      env:
        GH_TOKEN: "${{ inputs.token }}"
      shell: ${{ env.shell }}
      run: |
        zig build -Dfetch

    - name: Create Issue
      if: failure() && steps.fetch.conclusion == 'failure'
      env:
        BODY: "${{ env.gh_bot_issue_body }}"
        GH_TOKEN: "${{ inputs.token }}"
        TITLE: "${{ env.gh_bot_issue_title }}"
      shell: ${{ env.shell }}
      run: |
        gh issue create --title "${TITLE}" --body "${BODY}" --assignee "${GITHUB_REPOSITORY_OWNER}"

    - name: Diff
      if: steps.fetch.conclusion == 'success'
      id: diff
      shell: ${{ env.shell }}
      run: |
        diffs="$(git diff HEAD --name-only | wc -l)"
        printf 'len=%s\n' "${diffs}" >> "${GITHUB_OUTPUT}"

    - name: Update
      if: steps.fetch.conclusion == 'success' && steps.diff.outputs.len != '0'
      shell: ${{ env.shell }}
      run: |
        zig build -Dupdate

    - name: Create Pull Request
      if: steps.fetch.conclusion == 'success' && steps.diff.outputs.len != '0'
      env:
        BRANCH: "${{ env.bot_branch }}"
        DEFAULT: "${{ env.default_branch }}"
        GH_TOKEN: "${{ inputs.token }}"
        TITLE: "${{ env.gh_bot_pr_title }}"
      shell: ${{ env.shell }}
      run: |
        git add -A
        git commit -m "Bot: ${TITLE}"
        git push --force --set-upstream origin "${BRANCH}"
        gh pr create --base "${DEFAULT}" --fill --reviewer "${GITHUB_REPOSITORY_OWNER}"
