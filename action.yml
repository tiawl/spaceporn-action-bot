name: 'Bot'
description: 'Fetch Dependencies (zig modules, git submodules, git clone used in build.zig) & makes a pull request for tiawl/spaceporn dependencies'
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - uses: tiawl/spaceporn-dep-action-env@v1

    - name: Load environment
      shell: ${{ env.shell }}
      run: |
        yq "${{ env.bash_from_yaml }}" "${GITHUB_ACTION_PATH}/env.yml" >> "${GITHUB_ENV}"

    - name: If a PR/issue is already opened by the bot, this step allows to skip the job
      id: check
      shell: ${{ env.shell }}
      run: |
        printf 'labeled=%s\n' "$(( "$(gh pr list --label "${{ env.gh_label }}" --state open --json "${{ env.gh_issue_field }}" | jq length)" +
                                   "$(gh issue list --label "${{ env.gh_label }}" --state open --json "${{ env.gh_issue_field }}" | jq length)" ))" >> ${GITHUB_OUTPUT}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Setup Zig
      if: ${{ steps.check.outputs.labeled == '0' }}
      uses: goto-bus-stop/setup-zig@v2.2.0
      with:
        version: ${{ env.zig_version }}

    - name: Install packages
      if: ${{ steps.check.outputs.labeled == '0' }}
      shell: ${{ env.shell }}
      run: |
        sudo apt-get install -y ${{ env.packages }}

    - name: Setup git user information
      if: ${{ steps.check.outputs.labeled == '0' }}
      shell: ${{ env.shell }}
      run: |
        git config user.name "${{ env.gh_bot_name }}"
        git config user.email "${{ env.gh_bot_email }}"
        git checkout -b "${{ env.branch }}" || git checkout "${{ env.branch }}"

    - name: Fetch
      if: ${{ steps.check.outputs.labeled == '0' }}
      id: fetch
      shell: ${{ env.shell }}
      run: |
        zig build -Dfetch
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Create Issue
      if: ${{ failure() && steps.fetch.conclusion == 'failure' && steps.check.outputs.labeled == '0' }}
      shell: ${{ env.shell }}
      run: |
        gh issue create --title "${{ env.issue_title }}" --body "${{ env.issue_body }}" --label "${{ env.gh_label }}" --assignee "${GITHUB_REPOSITORY_OWNER}"
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Diff
      if: ${{ steps.check.outputs.labeled == '0' && steps.fetch.conclusion == 'success' }}
      id: diff
      shell: ${{ env.shell }}
      run: |
        printf 'len=%s\n' "$(git diff HEAD --name-only | wc -l)" >> ${GITHUB_OUTPUT}

    - name: Update
      if: ${{ steps.check.outputs.labeled == '0' && steps.fetch.conclusion == 'success' && steps.diff.outputs.len != '0' }}
      shell: ${{ env.shell }}
      run: |
        zig build -Dupdate

    - name: Create Pull Request
      if: ${{ steps.check.outputs.labeled == '0' && steps.fetch.conclusion == 'success' && steps.diff.outputs.len != '0' }}
      shell: ${{ env.shell }}
      run: |
        git add -A
        git commit -m "${{ env.pr_title }}"
        git push --force --set-upstream origin "${{ env.branch }}"
        gh pr create --base "${{ env.default_branch }}" --fill --label "${{ env.gh_label }}" --reviewer "${GITHUB_REPOSITORY_OWNER}"
      env:
        GITHUB_TOKEN: ${{ github.token }}
